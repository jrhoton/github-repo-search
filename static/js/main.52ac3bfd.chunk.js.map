{"version":3,"sources":["components/views/ErrorModal/ErrorModal.js","store/repoSlice.js","components/views/RepositoryItem/RepositoryItem.js","components/views/RepositoriesList/RepositoriesList.js","components/views/Search/Search.js","components/containers/Search/Search.js","components/containers/Details/Details.js","components/App.js","store/store.js","index.js"],"names":["ErrorModal","props","useState","open","setOpen","Modal","aria-label","role","className","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","message","fetchRepos","createAsyncThunk","queryString","a","axios","get","params","q","repoSlice","createSlice","name","initialState","items","selected","loading","error","reducers","selectRepo","state","action","find","repo","id","payload","extraReducers","pending","fulfilled","data","rejected","actions","RepositoryItem","to","onClick","language","stargazers_count","RepositoriesList","list","results","map","viewDetail","CircularProgress","style","marginLeft","size","left","top","Search","onKeyDown","e","key","search","FormControl","InputLabel","Input","value","queryParams","keyword","onChange","updateCriteria","target","required","minWidth","Select","sort","MenuItem","Button","color","variant","disabled","allowSearch","useSelector","setQueryParams","setAllowSearch","dispatch","useDispatch","criteria","preventDefault","query","Object","entries","forEach","concat","Details","href","owner","html_url","src","avatar_url","alt","full_name","description","App","basename","path","component","store","configureStore","reducer","repoReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52ac3bfd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal, Backdrop, Fade } from '@material-ui/core';\r\nimport './ErrorModal.css';\r\n\r\n/**\r\n * ErrorModal View\r\n * \r\n * This component intercepts and displays errors thrown by the GitHub API.\r\n * @props message\r\n */\r\nconst ErrorModal = (props) => {\r\n    const [open, setOpen] = useState(true);\r\n\r\n    const handleModalClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            aria-label='error modal'\r\n            role='alert'\r\n            className='modal'\r\n            open={open}\r\n            onClose={handleModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{ timeout: 500 }}>\r\n            <Fade in={open}>\r\n                <div className='errorMessage'>\r\n                    <h2>Error!</h2>\r\n                    <p>{props.message}</p>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ErrorModal;","import axios from 'axios';\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialRepoState = {\r\n    items: null,\r\n    selected: null,\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\nexport const fetchRepos = createAsyncThunk(\r\n    'repo/fetchRepos',\r\n    async (queryString) => {\r\n        return await axios.get('https://api.github.com/search/repositories', {\r\n            params: {q: queryString}\r\n        });\r\n    }\r\n);\r\n\r\nexport const repoSlice = createSlice({\r\n    name: 'repositories',\r\n    initialState: initialRepoState,\r\n    reducers: {\r\n        selectRepo(state, action) {\r\n            state.selected = state.items.find(repo => repo.id === action.payload);\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [fetchRepos.pending]: (state) => {\r\n            state.items = [];\r\n            state.loading = true;\r\n            state.error = null;\r\n        },\r\n        [fetchRepos.fulfilled]: (state, action) => {\r\n            state.items = [...action.payload.data.items];\r\n            state.loading = false;\r\n        },\r\n        [fetchRepos.rejected]: (state, action) => {\r\n            state.items = [];\r\n            state.loading = false;\r\n            state.error = action.error;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { selectRepo } = repoSlice.actions;\r\n\r\nexport default repoSlice.reducer;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './RepositoryItem.css';\r\n\r\n/**\r\n * RepositoryItem View\r\n * \r\n * Each result consists of a Link element which contains the repository name, language, and stargazers. The full repository\r\n * object is selected when clicked.\r\n * @props repo, selectRepo()\r\n */\r\nconst RepositoryItem = (props) => {\r\n    return (\r\n        <Link\r\n            role='result link'\r\n            aria-label='repository item'\r\n            className='row'\r\n            to=\"/details\"\r\n            onClick={() => props.selectRepo(props.repo.id)}>\r\n            <div className='nameColumn'>{props.repo.name}</div>\r\n            <div className='column'>{props.repo.language}</div>\r\n            <div className='column alignRight'>{props.repo.stargazers_count}</div>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default RepositoryItem;","import React from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport RepositoryItem from '../RepositoryItem/RepositoryItem';\r\nimport './RepositoriesList.css';\r\n\r\n/**\r\n * RepositoriesList View\r\n * \r\n * This component displays a progress indicator while loading after a request has been made to the GitHub API.\r\n * If the request is successful, results are mapped to individual RepositoryItem View components.\r\n * @props loading, results, viewDetail()\r\n */\r\nconst RepositoriesList = (props) => {\r\n    let list = null\r\n    if (props.results) {\r\n        list = props.results.map(repo => <RepositoryItem key={repo.id} repo={repo} selectRepo={() => props.viewDetail(repo.id)} />);\r\n    }\r\n\r\n    return(\r\n        <div \r\n            className='resultsContainer'\r\n            aria-label='results list'>\r\n            <div className='columnHeadings'>\r\n                <div className='nameColumn'>Repository Name</div>\r\n                <div className='column'>Language</div>\r\n                <div className='column alignRight'>Stars</div>\r\n            </div>\r\n            {props.loading ? \r\n                <CircularProgress\r\n                    aria-label='loading results'\r\n                    style={{ marginLeft: '50%' }}\r\n                    size={40}\r\n                    left={-20}\r\n                    top={30} /> :\r\n                null}\r\n            {list}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RepositoriesList;","import React, { Fragment } from 'react';\r\nimport { FormControl, InputLabel, Input, Select, MenuItem, Button} from '@material-ui/core';\r\nimport RepositoriesList from '../RepositoriesList/RepositoriesList';\r\nimport './Search.css';\r\n\r\n/**\r\n * Search View\r\n * \r\n * This component contains the search controls and renders the Repositories List once a request has been\r\n * made to the GitHub API.\r\n * @props queryParams, updateCriteria(), allowSearch, search(), loading, results, viewDetail()\r\n */\r\nconst Search = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <div \r\n                className='searchControls'\r\n                aria-label='search controls'\r\n                onKeyDown={e => {if (e.key === 'Enter') {props.search(e)}}}>\r\n                <FormControl \r\n                    className='grow control'\r\n                    aria-label='keyword search'>\r\n                    <InputLabel>Search Repositories</InputLabel>\r\n                    <Input\r\n                        name='keyword'\r\n                        role='text control'\r\n                        value={props.queryParams.keyword || ''}\r\n                        onChange={e => props.updateCriteria('keyword', e.target.value)}\r\n                        required />\r\n                </FormControl>\r\n                <FormControl \r\n                    className='control'\r\n                    aria-label='language search'>\r\n                    <InputLabel>Language</InputLabel>\r\n                    <Input\r\n                        name='language'\r\n                        role='text control'\r\n                        value={props.queryParams.language || ''}\r\n                        onChange={e => props.updateCriteria('language', e.target.value)} />\r\n                </FormControl>\r\n                <FormControl \r\n                    aria-label='sort by'\r\n                    style={{minWidth: 120, }}>\r\n                    <InputLabel>Sort By</InputLabel>\r\n                    <Select\r\n                        name='sort' \r\n                        role='select control'\r\n                        value={props.queryParams.sort || ''}\r\n                        onChange={e => props.updateCriteria('sort', e.target.value)}>\r\n                        <MenuItem value=''>Best Match</MenuItem>\r\n                        <MenuItem value='stars'>Stars</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <div className='control'>\r\n                    <Button\r\n                        aria-label='search button'\r\n                        role='button'\r\n                        color='primary'\r\n                        variant='contained'\r\n                        onClick={e => props.search(e)}\r\n                        disabled={!props.allowSearch}>\r\n                        Search\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            {props.loading || props.results ? \r\n                <RepositoriesList\r\n                    loading={props.loading}\r\n                    results={props.results}\r\n                    viewDetail={props.viewDetail} /> :\r\n                null}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Search;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchRepos, selectRepo } from '../../../store/repoSlice';\r\nimport { default as SearchView } from '../../views/Search/Search';\r\n\r\n/**\r\n * Search Container\r\n * \r\n * This is the base component for the '/' route. It contains the methods used by the Search View to query the \r\n * GitHub Repository Search API (https://docs.github.com/en/rest/reference/search).\r\n */\r\nconst Search = () => {\r\n    const results = useSelector(state => state.repo.items);\r\n    const loading = useSelector(state => state.repo.loading);\r\n\r\n    // queryParams contains a key (a specific search control) and its value.\r\n    const [queryParams, setQueryParams] = useState({});\r\n    // allowSearch determines whether the search button is enabled.\r\n    const [allowSearch, setAllowSearch] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // update queryParams whenever the value in any of the search controls is changed.\r\n    const updateCriteria = (key, value) => {\r\n        const criteria = {...queryParams, [key]: value};\r\n        criteria ? setAllowSearch(true) : setAllowSearch(false);\r\n        setQueryParams(criteria);\r\n    }\r\n\r\n    // Build a query string from the queryParams object and dispatch the fetchRepos action.\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        let query = '';\r\n        Object.entries(queryParams).forEach(([key, value]) => {\r\n            if (value) {\r\n                if (query) {query = query.concat(' ')}\r\n                if (key === 'keyword') {\r\n                    query = query.concat(value);\r\n                } else {\r\n                    query = query.concat(key, ':\"', value, '\"');\r\n                }\r\n            }\r\n        });\r\n        dispatch(fetchRepos(query));\r\n    }\r\n\r\n    // Store the repository that matched the passed id.\r\n    const selectRepository = (id) => {\r\n        dispatch(selectRepo(id));\r\n    };\r\n    \r\n    return (\r\n        <SearchView \r\n            queryParams={queryParams}\r\n            updateCriteria={updateCriteria}\r\n            allowSearch={allowSearch}\r\n            search={handleSearch}\r\n            loading={loading}\r\n            results={results}\r\n            viewDetail={selectRepository} />\r\n    );  \r\n};\r\n\r\nexport default Search;","import React, { Fragment } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport './Details.css';\r\n\r\n/**\r\n * Details Container\r\n * \r\n * This is the base component for the '/details' route. It displays the selected repository in greater detail.\r\n * If no repository has been selected, redirect to '/'.\r\n */\r\nconst Details = () => {\r\n    const repo = useSelector(state => state.repo.selected);\r\n\r\n    return (\r\n        <Fragment>\r\n            {!repo ? <Redirect to='/' /> :\r\n                <div className='detailsContainer'>\r\n                    <a href={repo.owner.html_url}>\r\n                        <div className='header'>\r\n                            <img \r\n                                className='avatar'\r\n                                src={repo.owner.avatar_url} \r\n                                alt='avatar' />\r\n                            <h2 className='name'>{repo.full_name}</h2>\r\n                        </div>\r\n                    </a>\r\n                    <p className='desc'>{repo.description}</p>\r\n                    <div className='condensed'>\r\n                        <p>{`Language: ${repo.language}`}</p> \r\n                        <p>{`Stars: ${repo.stargazers_count}`}</p>\r\n                    </div>\r\n                    <div className='condensed'>\r\n                        <Link to='/'>{`<< Back`}</Link>\r\n                        <a href={repo.html_url} className='floatRight'>{`View Repository >>`}</a>\r\n                    </div>\r\n                </div>}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Details;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport ErrorModal from './views/ErrorModal/ErrorModal';\nimport Search from './containers/Search/Search';\nimport Details from './containers/Details/Details';\n\nconst App = () => {\n  const error = useSelector(state => state.repo.error);\n\n  return (\n    <BrowserRouter basename='/github-repo-search'>\n      {error ? <ErrorModal message={error.message} /> : null}\n      <div className='App'>\n        <Switch>\n          <Route path='/details' component={Details} />\n          <Route path='/' component={Search} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport repoReducer from './repoSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        repo: repoReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport { store } from '../src/store/store';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}